# == Definition: apache::vhost-ssl
#
# This definition is deprecated and was replaced
# by apache::vhost::ssl.
#
# The definition now wraps around apache::vhost::ssl
# for backward compatibility reasons.

define apache::vhost-ssl (
  $ensure=present,
  $config_file='',
  $config_content=false,
  $htdocs=false,
  $conf=false,
  $readme=false,
  $docroot=false,
  $cgibin=true,
  $user='',
  $admin=$::admin,
  $group='',
  $mode=2570,
  $aliases=[],
  $ip_address='*',
  $cert=false,
  $certkey=false,
  $cacert=false,
  $cacrl=false,
  $certchain=false,
  $certcn=false,
  $verifyclient=undef,
  $options=[],
  $days='3650',
  $publish_csr=false,
  $sslonly=false,
  $ports=['*:80'],
  $sslports=['*:443'],
  $accesslog_format='combined',
) {

<<<<<<< HEAD
  # these 2 values are required to generate a valid SSL certificate.
  if (!$sslcert_country) { $sslcert_country = "??" }
  if (!$sslcert_organisation) { $sslcert_organisation = "undefined organisation" }

  if ($certcn != false ) { $sslcert_commonname = $certcn }
  else { $sslcert_commonname = $name }

  include apache::params

  $wwwuser = $user ? {
    ""      => $apache::params::user,
    default => $user,
  }

  # used in ERB templates
  $home = $apache::params::root

  $documentroot = $docroot ? {
    false   => "${home}/${name}/htdocs",
    default => $docroot,
  }

  $cgipath = $cgibin ? {
    true    => "${home}/${name}/cgi-bin/",
    false   => false,
    default => $cgibin,
  }

  # define variable names used in vhost-ssl.erb template
  $certfile      = "${apache::params::root}/$name/ssl/$name.crt"
  $certkeyfile   = "${apache::params::root}/$name/ssl/$name.key"
  $csrfile       = "${apache::params::root}/$name/ssl/$name.csr"

  # By default, use CA certificate list shipped with the distribution.
  if $cacert != false {
    $cacertfile = "${apache::params::root}/$name/ssl/cacert.crt"
  } else {
    $cacertfile = $operatingsystem ? {
      /RedHat|CentOS/ => "/etc/pki/tls/certs/ca-bundle.crt",
      Debian => "/etc/ssl/certs/ca-certificates.crt",
    }
  }

  # If a revocation file is provided
  if $cacrl != false {
    $cacrlfile = "${apache::params::root}/$name/ssl/cacert.crl"
  }

  if $certchain != false {
    $certchainfile = "${apache::params::root}/$name/ssl/certchain.crt"
  }


  # call parent definition to actually do the virtualhost setup.
  apache::vhost {$name:
    ensure         => $ensure,
    config_file    => $config_file,
    config_content => $config_content ? {
      false => $sslonly ? {
        true => template("apache/vhost-ssl.erb"),
        default => template("apache/vhost.erb", "apache/vhost-ssl.erb"),
      },
      default      => $config_content,
    },
    aliases        => $aliases,
    htdocs         => $htdocs,
    conf           => $conf,
    readme         => $readme,
    docroot        => $docroot,
    user           => $wwwuser,
    admin          => $admin,
    group          => $group,
    mode           => $mode,
    enable_default => $enable_default,
    ports          => $ports,
    accesslog_format => $accesslog_format,
  }

  if $ensure == "present" {
    file { "${apache::params::root}/${name}/ssl":
      ensure => directory,
      owner  => "root",
      group  => "root",
      mode   => 700,
      seltype => "cert_t",
      require => [File["${apache::params::root}/${name}"]],
    }

    # template file used to generate SSL key, cert and csr.
    file { "${apache::params::root}/${name}/ssl/ssleay.cnf":
      ensure  => present,
      owner   => "root",
      mode    => 0640,
      content => template("apache/ssleay.cnf.erb"),
      require => File["${apache::params::root}/${name}/ssl"],
    }

    # The certificate and the private key will be generated only if $name.crt
    # or $name.key are absent from the "ssl/" subdir.
    # The CSR will be re-generated each time this resource is triggered.
    exec { "generate-ssl-cert-$name":
      command => "/usr/local/sbin/generate-ssl-cert.sh ${name} ${apache::params::root}/${name}/ssl/ssleay.cnf ${apache::params::root}/${name}/ssl/ ${days}",
      creates => $csrfile,
      notify  => Exec["apache-graceful"],
      require => [
        File["${apache::params::root}/${name}/ssl/ssleay.cnf"],
        File["/usr/local/sbin/generate-ssl-cert.sh"],
      ],
    }

    # The virtualhost's certificate.
    # Manage content only if $cert is set, else use the certificate generated
    # by generate-ssl-cert.sh
    file { $certfile:
      owner => "root",
      group => "root",
      mode  => 640,
      source  => $cert ? {
        false   => undef,
        default => $cert,
      },
      seltype => "cert_t",
      notify  => Exec["apache-graceful"],
      require => [File["${apache::params::root}/${name}/ssl"], Exec["generate-ssl-cert-${name}"]],
    }

    # The virtualhost's private key.
    # Manage content only if $certkey is set, else use the key generated by
    # generate-ssl-cert.sh
    file { $certkeyfile:
      owner => "root",
      group => "root",
      mode  => 600,
      source  => $certkey ? {
        false   => undef,
        default => $certkey,
      },
      seltype => "cert_t",
      notify  => Exec["apache-graceful"],
      require => [File["${apache::params::root}/${name}/ssl"], Exec["generate-ssl-cert-${name}"]],
    }

    if $cacert != false {
      # The certificate from your certification authority. Defaults to the
      # certificate bundle shipped with your distribution.
      file { $cacertfile:
        owner   => "root",
        group   => "root",
        mode    => 640,
        source  => $cacert,
        seltype => "cert_t",
        notify  => Exec["apache-graceful"],
        require => File["${apache::params::root}/${name}/ssl"],
      }
    }

    if $cacrl != false {
      # certificate revocation file
      file { $cacrlfile:
        owner   => "root",
        group   => "root",
        mode    => 640,
        source  => $cacrl,
        seltype => "cert_t",
        notify  => Exec["apache-graceful"],
        require => File["${apache::params::root}/${name}/ssl"],
      }
    }

    if $certchain != false {

      # The certificate chain file from your certification authority's. They
      # should inform you if you need one.
      file { $certchainfile:
        owner => "root",
        group => "root",
        mode  => 640,
        source  => $certchain,
        seltype => "cert_t",
        notify  => Exec["apache-graceful"],
        require => File["${apache::params::root}/${name}/ssl"],
      }
    }

    # put a copy of the CSR in htdocs, or another location if $publish_csr
    # specifies so.
    file { "public CSR file for $name":
      ensure  => $publish_csr ? {
        false   => "absent",
        default => "present",
      },
      path    => $publish_csr ? {
        true    => "${apache::params::root}/${name}/htdocs/${name}.csr",
        false   => "${apache::params::root}/${name}/htdocs/${name}.csr",
        default => $publish_csr,
      },
      source  => $publish_csr ? {
        false   => undef,
        default => "file://$csrfile",
      },
      mode    => 640,
      seltype => "httpd_sys_content_t",
      require => Exec["generate-ssl-cert-$name"],
    }
=======
  fail 'apache::vhost-ssl is deprecated. Use apache::vhost::ssl instead'
>>>>>>> github/master

}
